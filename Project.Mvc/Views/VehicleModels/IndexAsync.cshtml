@model X.PagedList.IPagedList<Project.Service.VehicleModel>
@using X.PagedList.Mvc;


@{
    ViewBag.Title = "Vehicle Models";
}

<h2>Vehicle Models</h2>

<p>
    @Html.ActionLink("Create New", "CreateAsync")
</p>

@using (Html.BeginForm("IndexAsync", "VehicleModels", FormMethod.Get))
{
    <p>
        Find by name: @Html.TextBox("CurrentFilter", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
    <p>
        <span>Page Size: @Html.DropDownList("pageSize")</span>
        <input type="submit" value="Ok" />
    </p>
}

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Vehicle Make", "IndexAsync", new { sortBy = "Make", currentFilter = ViewBag.CurrentFilter, ascending = ViewBag.Ascending })
        </th>
        <th>
            @Html.ActionLink("Name", "IndexAsync", new { sortBy = "Name", currentFilter = ViewBag.CurrentFilter, ascending = ViewBag.Ascending })
        </th>
        <th>
            @Html.ActionLink("Abrv", "IndexAsync", new { sortBy = "Abrv", currentFilter = ViewBag.CurrentFilter, ascending = ViewBag.Ascending })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.VehicleMake.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Abrv)
            </td>
            <td>
                @Html.ActionLink("Edit", "EditAsync", new { id = item.VehicleModelId }) |
                @Html.ActionLink("Details", "DetailsAsync", new { id = item.VehicleModelId }) |
                @Html.ActionLink("Delete", "DeleteAsync", new { id = item.VehicleModelId })
            </td>
        </tr>
    }

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("IndexAsync", new { page, pageSize = ViewBag.SizeofPage, sortBy = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter, ascending = ViewBag.Ascending }))
